# -*- coding: utf-8 -*-
"""rose1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JFhElop4M5htvesBZmih9c1f9ulKWWux
"""



import pandas as pd
import numpy as np
from dash import Dash, html, dcc, Input, Output, callback
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import random
import socket
from contextlib import closing

def find_free_port():
    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as s:
        s.bind(('', 0))
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        return s.getsockname()[1]

# Create sample data with your requirements
def create_sample_data():
    # Rose growth data
    varieties = ['Red Rose', 'White Rose', 'Pink Rose', 'Yellow Rose', 'Hybrid Tea']
    growth_stages = ['Seed', 'Sprout', 'Budding', 'Flowering', 'Harvest']

    # Create date range for next 60 days
    dates = [datetime.now().date() + timedelta(days=i) for i in range(60)]

    data = []
    for date in dates:
        for variety in varieties:
            # Simulate growth based on season
            month = date.month
            if month in [3, 4, 5]:  # Spring - good growth
                growth_speed = random.uniform(1.2, 1.8)
            elif month in [6, 7, 8]:  # Summer - moderate
                growth_speed = random.uniform(0.8, 1.3)
            else:  # Winter - slow
                growth_speed = random.uniform(0.5, 1.0)

            # Simulate market prices (higher during festivals)
            base_price = random.uniform(15, 25)
            if date.month == 2 and 10 <= date.day <= 14:  # Valentine
                price = base_price * 2.5
            elif date.month == 10 and date.day <= 5:  # Diwali
                price = base_price * 1.8
            elif date.month == 8 and date.day <= 15:  # Pongal
                price = base_price * 1.6
            else:
                price = base_price

            data.append({
                'date': date,
                'variety': variety,
                'growth_stage': random.choice(growth_stages),
                'growth_rate': growth_speed,
                'price_per_stem': round(price, 2),
                'soil_moisture': random.randint(40, 80),
                'temperature': random.randint(20, 35),
                'rainfall': random.randint(0, 50)
            })

    return pd.DataFrame(data)

# Create the data
df = create_sample_data()

# Initialize the Dash app
app = Dash(__name__)

app.layout = html.Div([
    html.Div([
        html.H1("🌹 Smart Rose Farming Dashboard",
                style={'textAlign': 'center', 'color': '#2E8B57', 'marginBottom': '20px'}),
    ]),

    # Real-time Farming Cards
    html.Div([
        html.Div([
            html.H3("🌱 Today's Planting", style={'color': '#228B22'}),
            html.H4("Optimal Day ✅", style={'color': 'green'}),
            html.P("Best varieties: Red Rose")
        ], style={'padding': '20px', 'border': '2px solid #228B22', 'borderRadius': '10px', 'margin': '10px', 'flex': '1'}),

        html.Div([
            html.H3("💰 Current Market", style={'color': '#FF6B35'}),
            html.H4("₹18-25/stem", style={'color': 'orange'}),
            html.P("Prices rising for Valentine")
        ], style={'padding': '20px', 'border': '2px solid #FF6B35', 'borderRadius': '10px', 'margin': '10px', 'flex': '1'}),

        html.Div([
            html.H3("🌦️ Weather", style={'color': '#1E90FF'}),
            html.H4("Good for Growth", style={'color': 'blue'}),
            html.P("Temp: 25-30°C, Rain: 20%")
        ], style={'padding': '20px', 'border': '2px solid #1E90FF', 'borderRadius': '10px', 'margin': '10px', 'flex': '1'}),
    ], style={'display': 'flex', 'justifyContent': 'space-around', 'marginBottom': '30px'}),

    # Tabs for different sections
    dcc.Tabs([
        # Tab 1: Growth Prediction
        dcc.Tab(label='🌱 Growth Prediction', children=[
            html.Div([
                html.H3("Seed to Harvest Timeline", style={'textAlign': 'center'}),
                dcc.Dropdown(
                    id='variety-selector',
                    options=[{'label': v, 'value': v} for v in df['variety'].unique()],
                    value='Red Rose',
                    style={'width': '50%', 'margin': 'auto'}
                ),
                dcc.Graph(id='growth-timeline'),

                html.Div([
                    html.H4("🌱 Growth Insights:"),
                    html.Ul([
                        html.Li("Seeds will sprout in 7-10 days"),
                        html.Li("Budding starts in 45-60 days"),
                        html.Li("First harvest in 75-90 days"),
                        html.Li("Full production in 120 days")
                    ])
                ], style={'background': '#f0f8ff', 'padding': '20px', 'borderRadius': '10px', 'marginTop': '20px'})
            ])
        ]),

        # Tab 2: Climate & Market Prediction
        dcc.Tab(label='📈 Climate & Market', children=[
            html.Div([
                html.H3("Climate & Price Predictions", style={'textAlign': 'center'}),
                dcc.Graph(id='climate-prediction'),
                dcc.Graph(id='price-prediction'),

                html.Div([
                    html.H4("🎯 Smart Suggestions:"),
                    html.Ul([
                        html.Li("🌧️ Next week: Light rainfall expected - reduce watering"),
                        html.Li("🔥 Temperature: Rising trend - provide shade cover"),
                        html.Li("💰 Prices: Expected to rise 30% for Valentine season"),
                        html.Li("⏰ Harvest timing: Target Feb 10-14 for maximum profit")
                    ])
                ], style={'background': '#fff0f5', 'padding': '20px', 'borderRadius': '10px'})
            ])
        ]),

        # Tab 3: Festival Planning
        dcc.Tab(label='🎉 Festival Strategy', children=[
            html.Div([
                html.H3("Festival Market Planning", style={'textAlign': 'center'}),

                html.Div([
                    html.Div([
                        html.H4("💝 Valentine Season", style={'color': 'red'}),
                        html.P("Feb 1-14",style={'color':'white'}),
                        html.P("📈 Price Increase: 150%",style={'color':'white'}),
                        html.P("🎯 Target: Red Roses"),
                        html.P("💰 Expected: ₹40-60/stem")
                    ], style={'padding': '15px', 'border': '2px solid red', 'margin': '10px', 'flex': '1'}),

                    html.Div([
                        html.H4("🪔 Diwali Season", style={'color': 'orange'}),
                        html.P("Oct 15-30"),
                        html.P("📈 Price Increase: 80%"),
                        html.P("🎯 Target: Yellow & Pink Roses"),
                        html.P("💰 Expected: ₹30-45/stem")
                    ], style={'padding': '15px', 'border': '2px solid orange', 'margin': '10px', 'flex': '1'}),

                    html.Div([
                        html.H4("🌾 Pongal Season", style={'color': 'green'}),
                        html.P("Jan 10-20"),
                        html.P("📈 Price Increase: 60%"),
                        html.P("🎯 Target: All varieties"),
                        html.P("💰 Expected: ₹25-40/stem")
                    ], style={'padding': '15px', 'border': '2px solid green', 'margin': '10px', 'flex': '1'})
                ], style={'display': 'flex', 'justifyContent': 'space-around'}),

                html.Div([
                    html.H4("📅 Planting Calendar for Festivals:"),
                    html.Table([
                        html.Thead(html.Tr([html.Th('Festival'), html.Th('Plant Date'), html.Th('Harvest Date'), html.Th('Best Variety')])),
                        html.Tbody([
                            html.Tr([html.Td('Valentine'), html.Td('Nov 15'), html.Td('Feb 10'), html.Td('Red Rose')]),
                            html.Tr([html.Td('Diwali'), html.Td('July 20'), html.Td('Oct 20'), html.Td('Yellow Rose')]),
                            html.Tr([html.Td('Pongal'), html.Td('Oct 1'), html.Td('Jan 15'), html.Td('All Varieties')]),
                            html.Tr([html.Td('Christmas'), html.Td('Sep 1'), html.Td('Dec 20'), html.Td('White Rose')])
                        ])
                    ], style={'width': '100%', 'textAlign': 'center'})
                ], style={'marginTop': '20px'})
            ])
        ]),

        dcc.Tab(label='👨‍🌾 Farmer Advice', children=[
            html.Div([
                html.H3("Personalized Farming Advice", style={'textAlign': 'center'}),

                html.Div([
                    html.Div([
                        html.H4("🌱 This Week's Action Plan:"),
                        html.Ul([
                            html.Li("💧 Watering: Once daily (morning)"),
                            html.Li("🌿 Fertilizer: Organic mix every 15 days"),
                            html.Li("🐛 Pest Control: Neem spray weekly"),
                            html.Li("✂️ Pruning: Remove dead buds"),
                            html.Li("🌞 Sunlight: 6-8 hours daily")
                        ])
                    ], style={'flex': '1', 'padding': '20px', 'background': '#f0fff0'}),

                    html.Div([
                        html.H4("💰 Market Strategy:"),
                        html.Ul([
                            html.Li("🛒 Sell 60% to local markets"),
                            html.Li("🏪 30% to florists"),
                            html.Li("🎁 10% for special orders"),
                            html.Li("💸 Hold stock for price peaks")
                        ])
                    ], style={'flex': '1', 'padding': '20px', 'background': '#fff0f5'})
                ], style={'display': 'flex', 'gap': '20px'}),

                html.Div([
                    html.H4("🚨 Immediate Alerts:"),
                    html.Div([
                        html.P("✅ Good: Soil moisture optimal"),
                        html.P("⚠️ Warning: Temperature rising next week"),
                        html.P("💡 Suggestion: Increase shade coverage"),
                        html.P("🎯 Opportunity: Valentine prices starting to rise")
                    ], style={'background': '#fffacd', 'padding': '15px', 'borderRadius': '5px'})
                ], style={'marginTop': '20px'})
            ])
        ])
    ])
])

# Callback for growth prediction
@app.callback(
    Output('growth-timeline', 'figure'),
    [Input('variety-selector', 'value')]
)
def update_growth_timeline(selected_variety):
    # Simulate growth timeline
    stages = ['Seed Planting', 'Sprouting', 'Budding', 'Flowering', 'Harvest']
    days = [0, 10, 45, 75, 90]

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=days, y=stages,
        mode='lines+markers',
        line=dict(width=4, color='green'),
        marker=dict(size=12, color='lightgreen')
    ))

    fig.update_layout(
        title=f'{selected_variety} - Growth Timeline',
        xaxis_title='Days After Planting',
        yaxis_title='Growth Stage',
        height=400
    )

    return fig

# Callback for climate prediction
@app.callback(
    [Output('climate-prediction', 'figure'),
     Output('price-prediction', 'figure')],
    [Input('climate-prediction', 'id')]
)
def update_predictions(_):
    # Climate prediction
    days = list(range(1, 31))
    temp = [25 + 5 * np.sin(i/5) for i in days]
    rain = [max(0, 10 + 8 * np.sin(i/3)) for i in days]

    climate_fig = go.Figure()
    climate_fig.add_trace(go.Scatter(x=days, y=temp, name='Temperature (°C)', line=dict(color='red')))
    climate_fig.add_trace(go.Scatter(x=days, y=rain, name='Rainfall (mm)', line=dict(color='blue'), yaxis='y2'))

    climate_fig.update_layout(
        title='30-Day Climate Prediction',
        xaxis_title='Days from Today',
        yaxis=dict(title='Temperature (°C)', side='left'),
        yaxis2=dict(title='Rainfall (mm)', side='right', overlaying='y'),
        height=400
    )

    # Price prediction
    valentine_days = list(range(1, 31))
    prices = [20 + 15 * max(0, np.sin((i-20)/3)) for i in valentine_days]

    price_fig = go.Figure()
    price_fig.add_trace(go.Scatter(
        x=valentine_days, y=prices,
        fill='tozeroy',
        line=dict(color='purple', width=3),
        name='Price per stem'
    ))

    price_fig.add_vrect(x0=10, x1=14, fillcolor="red", opacity=0.2, line_width=0)
    price_fig.add_annotation(x=12, y=35, text="Valentine Peak", showarrow=True, arrowhead=2)

    price_fig.update_layout(
        title='30-Day Price Prediction (Valentine Effect)',
        xaxis_title='Days from Today',
        yaxis_title='Price (₹ per stem)',
        height=400
    )

    return climate_fig, price_fig

print("🚀 Starting Smart Farming Dashboard...")
print("📊 Dashboard will open in new tab")
print("👉 Click the link below when it appears!")
print("⏳ Please wait...")

# Use free port
free_port = find_free_port()
print(f"🚀 Using free port: {free_port}")

# Run the app
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=free_port, debug=False)